@model AhorcadoProyectoWeb.Models.PartidaViewModel
@{
    ViewBag.Title = "Partida";
    var total = Model.SegundosRestantes; // usa el tiempo restante
    var usados = Model.LetrasProbadasCompact ?? "";
    string[] filas = new[] {
        "A,B,C,D,E",
        "F,G,H,I,J",
        "K,L,M,N,Ñ",
        "O,P,Q,R,S",
        "T,U,V,W,X",
        "Y,Z"
    };
}

<style>
    /* ====== Estilos “cool” del teclado y tarjetas ====== */
    .card-soft {
        border: 0;
        border-radius: 16px;
        box-shadow: 0 6px 24px rgba(0,0,0,.06);
    }

    .board {
        letter-spacing: .55rem;
        font-size: 2rem;
    }

    .stat-pill {
        display: inline-block;
        padding: .25rem .5rem;
        border-radius: .5rem;
        background: #f1f5f9;
        font-weight: 600;
    }

    .kbd {
        margin-top: .25rem;
    }

    .kbd-row {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: .5rem;
    }

    .btn-letter {
        min-width: 52px;
        height: 52px;
        padding: 0 .6rem;
        border: 0;
        border-radius: 12px;
        font-weight: 800;
        letter-spacing: .5px;
        text-transform: uppercase;
        background: linear-gradient(180deg, #4f8cff, #2563eb);
        color: #fff;
        box-shadow: 0 6px 18px rgba(37,99,235,.35), inset 0 1px 0 rgba(255,255,255,.15);
        transition: transform .06s ease, box-shadow .18s ease, opacity .18s ease;
    }

        .btn-letter:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 22px rgba(37,99,235,.44);
        }

        .btn-letter:active {
            transform: translateY(0);
            box-shadow: 0 4px 14px rgba(37,99,235,.32);
        }

        .btn-letter[disabled] {
            background: linear-gradient(180deg, #e9ecef, #dfe3e8) !important;
            color: #6c757d !important;
            box-shadow: inset 0 1px 0 rgba(255,255,255,.8), inset 0 -1px 0 rgba(0,0,0,.04) !important;
            cursor: not-allowed;
            opacity: .9;
        }
</style>

<h2 class="mb-3">Partida</h2>

@if (TempData["JuegoOk"] != null)
{
    <div class="alert alert-info">@TempData["JuegoOk"]</div>
}

<div class="row">
    <div class="col-md-7">
        <div class="card card-soft p-3 mb-3">
            <p class="mb-1"><strong>Jugador:</strong> @Model.UsuarioNombre</p>
            <p class="mb-1"><strong>Dificultad:</strong> @Model.Dificultad</p>
            <p class="mb-1">
                <strong>Tiempo:</strong> <span id="timer" class="stat-pill">@total s</span>
                &nbsp; <strong>Fallos:</strong> <span class="stat-pill">@Model.IntentosFallidos / @Model.MaxFallos</span>
            </p>
            <p class="mb-0"><strong>Puntaje:</strong> Victoria @Model.PuntosVictoria / Derrota @Model.PuntosDerrota</p>
        </div>

        <div class="card card-soft p-4 text-center mb-3">
            <div class="board mb-2">
                @Model.PalabraOculta
            </div>
            <div class="text-muted">Letras probadas: @Model.LetrasProbadas</div>
        </div>

        <!-- Teclado de letras -->
        @using (Html.BeginForm("Adivinar", "Juego", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="kbd card card-soft p-3">
                @foreach (var fila in filas)
                {
                    <div class="kbd-row mb-2">
                        @foreach (var L in fila.Split(','))
                        {
                            <!--
                              Cálculo inline para evitar bloques @{ }:
                              - fold = L.ToLower() (salvo "Ñ" → "ñ")
                              - disabled si usados contiene ese fold
                            -->
                            <button type="submit"
                                    name="letra"
                                    value="@L"
                                    class="btn-letter"
                                    @(usados.Contains((L.ToLower() == "ñ") ? "ñ" : L.ToLower()) ? "disabled=\"disabled\"" : "")>
                                @L
                                </button>
                            }
                    </div>
                }
            </div>
        }

        <!-- ÚNICO botón visible en partida -->
        <div class="d-flex gap-2 mt-3">
            @using (Html.BeginForm("NuevoIntento", "Juego", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-warning" style="border-radius:12px; font-weight:600;">Nuevo intento</button>
            }
        </div>
    </div>
</div>

<!-- 🔒 Form oculto REAL para rendirse (lo envía el timer al llegar a 0) -->
@using (Html.BeginForm("Rendirse", "Juego", FormMethod.Post, new { id = "formRendirse", style = "display:none" }))
{
    @Html.AntiForgeryToken()
}

<hr />
<h5>Reglas de tiempo y puntaje</h5>
<ul class="mb-3">
    <li><strong>Fácil:</strong> 1:30 min (90s). Victoria: +1 / Derrota: -1</li>
    <li><strong>Normal:</strong> 1:00 min (60s). Victoria: +2 / Derrota: -2</li>
    <li><strong>Difícil:</strong> 0:30 min (30s). Victoria: +3 / Derrota: -3</li>
</ul>

<a class="btn btn-light" href="@Url.Action("Index","Home")">Volver al inicio</a>

<script>
(function() {
    var total = @total;
    var el = document.getElementById('timer');
    var rendirseForm = document.getElementById('formRendirse');

    var interval = setInterval(function(){
        total--;
        if (el) el.textContent = total + " s";
        if (total <= 0) {
            clearInterval(interval);
            if (rendirseForm) rendirseForm.submit(); // tiempo agotado = derrota (POST real con token)
        }
    }, 1000);
})();
</script>
